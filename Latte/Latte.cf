entrypoints ProgramC ;
Program.        ProgramC ::= [TopDef] ;

FunDecl.        TopDef ::= FunDefC ;
ClassDecl.      TopDef ::= "class" Ident "{" [ClassItemDef] "}" ;
ClassDeclExt.   TopDef ::= "class" Ident "extends" Ident "{" [ClassItemDef] "}" ;
separator nonempty TopDef "" ;

ClassAttrDecl.  ClassItemDef ::= Type Ident ";" ;
ClassMthdDecl.  ClassItemDef ::= FunDefC ;
separator nonempty ClassItemDef "" ;

FunDef.    FunDefC ::= Type Ident "(" [ArgC] ")" BlockC ;

Arg.  	   ArgC ::= Type Ident ;
separator  ArgC "," ;

Block.     BlockC ::= "{" [Stmt] "}" ;

Empty.     Stmt ::= ";" ;
BStmt.     Stmt ::= BlockC ;
Decl.      Stmt ::= Type Item ";" ;
Ass.       Stmt ::= LValue "=" Expr  ";" ;
Incr.      Stmt ::= LValue "++"  ";" ;
Decr.      Stmt ::= LValue "--"  ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;
While.     Stmt ::= "while" "(" Expr ")" Stmt;
For.       Stmt ::= "for" "(" Type Ident ":" Ident ")" Stmt ;
SExp.      Stmt ::= Expr ";" ;
separator  Stmt "" ;

NoInit.    Item ::= LValue ; 
Init.      Item ::= LValue "=" Expr ;
separator nonempty Item "," ;

LIdent.    LValue ::= Ident ;
LAt.       LValue ::= Expr6 "[" Expr "]" ;
LAttr.     LValue ::= Expr6 "." Ident ;

Cls.       Type ::= Ident ;
Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "boolean" ;
Void.      Type ::= "void" ;
Arr.       Type ::= Type "[]" ;
internal Fun. Type ::= Type "(" [Type] ")" ;
separator  Type "," ;

 
ELitInt.   Expr7 ::= Integer ;
EString.   Expr7 ::= String ;
ELitTrue.  Expr7 ::= "true" ;
ELitFalse. Expr7 ::= "false" ;
ELVal.     Expr7 ::= LValue ;
EApp.      Expr7 ::= Ident "(" [Expr] ")" ;
EMethod.   Expr7 ::= Expr7 "." Ident "(" [Expr] ")" ;
ENew.      Expr6 ::= "new" Ident ;
ENewArr.   Expr6 ::= "new" Type "[" Expr "]" ;
ECast.     Expr5 ::= "(" Ident ")" Expr6 ;
ENeg.      Expr5 ::= "-" Expr5 ;
ENot.      Expr5 ::= "!" Expr5 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
coercions  Expr 7 ;
separator  Expr "," ;

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

comment    "//" ;
comment    "/*" "*/" ;