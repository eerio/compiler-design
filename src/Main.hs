-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- | Program to test parser.

module Main where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile
  )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure )
import Control.Monad      ( when )

import Latte.Abs   ( ProgramC )
import Latte.Lex   ( Token, mkPosToken )
import Latte.Par   ( pProgramC, myLexer )
import Latte.Print ( Print, printTree )
import Latte.Skel  ()

import TypeChecker ( typeCheck)
import BackendLLVM ( emitLLVM )
import System.IO (hPutStrLn, stderr)
import Prelude (writeFile)
import System.FilePath (replaceExtension)

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun ProgramC -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p f

run :: Verbosity -> ParseFun ProgramC -> String -> String -> IO ()
run v p f s =
  let tokens = myLexer s in
  let showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ] in
  case p tokens of
    Left err -> do
      hPutStrLn stderr "ERROR"
      hPutStrLn stderr err
      exitFailure
    Right tree -> do
      typeCheck tree
      hPutStrLn stderr "OK"
      -- put llvm into file f
      writeFile (replaceExtension f "ll") $ emitLLVM tree

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    "-s":fs    -> mapM_ (runFile 0 pProgramC) fs
    fs         -> mapM_ (runFile 2 pProgramC) fs

